/*!
 * https://github.com/jhudson8/react-mixin-manager v0.6.0;  MIT license; Joe Hudson<joehud_AT_gmail.com>
 */
!function(e){"function"==typeof define&&define.amd?define(["react"],e):"undefined"!=typeof exports&&"undefined"!=typeof require?module.exports=function(i){e(i)}:e(React)}(function(React){function get(values,index,rtn){function addTo(name){if(!index[name]){var mixinName=name,mixinParams,match=mixinName.match(/^([^\(]*)\s*\(([^\)]*)\)\s*/);match&&(mixinName=match[1],mixinParams=eval("["+match[2]+"]"));var mixin=React.mixins._mixins[mixinName],checkAgain=!1;if(!mixin)throw new Error('invalid mixin "'+name+'"');if("function"==typeof mixin)mixin=mixin.apply(this,mixinParams||[]),checkAgain=!0;else if(mixinParams)throw new Error('the mixin "'+name+'" does not support parameters');get(React.mixins._dependsOn[name],index,rtn),get(React.mixins._dependsInjected[name],index,rtn),index[name]=!0,checkAgain?get([mixin],index,rtn):rtn.push(mixin)}}function handleMixin(e){e&&(Array.isArray(e)?get(e,index,rtn):"string"==typeof e?addTo(e):rtn.push(e))}if(Array.isArray(values))for(var i=0;i<values.length;i++)handleMixin(values[i]);else handleMixin(values)}function addMixin(e,i,n,t){var a=React.mixins;(t||!a._mixins[e])&&(a._dependsOn[e]=n.length&&n,a._mixins[e]=i)}function GROUP(){}function mixinParams(e,i){return Array.isArray(e[1])?[e[0],e[1][0],Array.prototype.slice.call(e[1],1),i]:[e[0],e[1],Array.prototype.slice.call(e,2),i]}var _createClass=React.createClass;React.createClass=function(e){return e.mixins&&(e.mixins=React.mixins.get(e.mixins)),_createClass.apply(React,arguments)},React.mixins={get:function(){var e=[],i={};return get(Array.prototype.slice.call(arguments),i,e),e},inject:function(e){var i=this._dependsInjected[e];i||(i=this._dependsInjected[e]=[]),i.push(Array.prototype.slice.call(arguments,1))},alias:function(e){addMixin(e,GROUP,Array.prototype.slice.call(arguments,1),!1)},add:function(){addMixin.apply(this,mixinParams(arguments,!1))},replace:function(){addMixin.apply(this,mixinParams(arguments,!0))},exists:function(e){return this._mixins[e]||!1},_dependsOn:{},_dependsInjected:{},_mixins:{}},React.mixins.add("deferUpdate",{getInitialState:function(){return{}},deferUpdate:function(){var e=this.state;if(!e._deferUpdate){e._deferUpdate=!0;var i=this;setTimeout(function(){delete e._deferUpdate,i.isMounted()&&i.forceUpdate()},0)}}})});