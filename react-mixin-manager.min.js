/*!
 * https://github.com/jhudson8/react-mixin-manager v0.6.1;  MIT license; Joe Hudson<joehud_AT_gmail.com>
 */
!function(e){"function"==typeof define&&define.amd?define(["react"],e):"undefined"!=typeof exports&&"undefined"!=typeof require?module.exports=function(n){e(n)}:e(React)}(function(React){function get(values,index,rtn){function addTo(name){var indexName=name,match=name.match(/^([^\(]*)\s*\(([^\)]*)\)\s*/),params=match&&match[2];if(name=match&&match[1]||name,!index[indexName]){params&&(params=eval("["+params+"]"));var mixin=React.mixins._mixins[name],checkAgain=!1;if(!mixin)throw new Error('invalid mixin "'+name+'"');if("function"==typeof mixin)mixin=mixin.apply(this,params||[]),checkAgain=!0;else if(params)throw new Error('the mixin "'+name+'" does not support parameters');get(React.mixins._dependsOn[name],index,rtn),get(React.mixins._dependsInjected[name],index,rtn),index[indexName]=!0,checkAgain?get([mixin],index,rtn):rtn.push(mixin)}}function handleMixin(e){e&&(Array.isArray(e)?get(e,index,rtn):"string"==typeof e?addTo(e):rtn.push(e))}if(Array.isArray(values))for(var i=0;i<values.length;i++)handleMixin(values[i]);else handleMixin(values)}function addMixin(e,n,i,a){var t=React.mixins;(a||!t._mixins[e])&&(t._dependsOn[e]=i.length&&i,t._mixins[e]=n)}function GROUP(){}function mixinParams(e,n){return Array.isArray(e[1])?[e[0],e[1][0],Array.prototype.slice.call(e[1],1),n]:[e[0],e[1],Array.prototype.slice.call(e,2),n]}var _createClass=React.createClass;React.createClass=function(e){return e.mixins&&(e.mixins=React.mixins.get(e.mixins)),_createClass.apply(React,arguments)},React.mixins={get:function(){var e=[],n={};return get(Array.prototype.slice.call(arguments),n,e),e},inject:function(e){var n=this._dependsInjected[e];n||(n=this._dependsInjected[e]=[]),n.push(Array.prototype.slice.call(arguments,1))},alias:function(e){addMixin(e,GROUP,Array.prototype.slice.call(arguments,1),!1)},add:function(){addMixin.apply(this,mixinParams(arguments,!1))},replace:function(){addMixin.apply(this,mixinParams(arguments,!0))},exists:function(e){return this._mixins[e]||!1},_dependsOn:{},_dependsInjected:{},_mixins:{}},React.mixins.add("deferUpdate",{getInitialState:function(){return{}},deferUpdate:function(){var e=this.state;if(!e._deferUpdate){e._deferUpdate=!0;var n=this;setTimeout(function(){delete e._deferUpdate,n.isMounted()&&n.forceUpdate()},0)}}})});